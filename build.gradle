plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        url 'https://maven.terraformersmc.com/releases/'
    }
    maven {
        url 'https://masa.dy.fi/maven'
    }
    maven{
        url "https://jitpack.io"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Malilib and Litematica
    modImplementation "maven.modrinth:malilib:${project.malilib_version}"
    modImplementation "maven.modrinth:litematica:${project.litematica_version}"

    // modmenu
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
}

loom {
    accessWidenerPath = file("src/main/resources/schematicpreview.accesswidener")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "malilib_version": project.malilib_version,
                "litematica_version": project.litematica_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// Defined in user gradle.properties
String modrinthToken = property("modrinth_forminotaur_token")

if (modrinthToken) {
    modrinth {
        token = modrinthToken
        projectId = "schematicpreview"
        versionNumber = project.mod_version
        versionType = "release" // This is the default -- can also be `beta` or `alpha`
        uploadFile = remapJar
        gameVersions = ["1.21.3"] // Must be an array, even with only one version
        dependencies { // A special DSL for creating dependencies
            // scope.type
            // The scope can be `required`, `optional`, `incompatible`, or `embedded`
            // The type can either be `project` or `version`
            required.project "fabric-api"
            required.project "malilib"
            required.project "litematica"
            optional.project "modmenu"
        }
    }
}
